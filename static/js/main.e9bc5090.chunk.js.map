{"version":3,"sources":["context/AuthContext/AuthContext.jsx","firebase.js","utils/history.ts","routes/PrivateRoutes.jsx","App.jsx","serviceWorker.js","index.tsx"],"names":["AuthContext","React","createContext","AuthProvider","children","useState","currentUser","setCurrentUser","pending","setPending","useEffect","app","auth","onAuthStateChanged","user","size","Provider","value","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createBrowserHistory","PrivateRoute","RouteComponent","component","rest","useContext","render","routeProps","to","Login","lazy","Signup","Homepage","Saved","App","history","fallback","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOAIaA,EAAcC,IAAMC,gBAEpBC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACNC,mBAAS,MADH,mBACrCC,EADqC,KACxBC,EADwB,OAEdF,oBAAS,GAFK,mBAErCG,EAFqC,KAE5BC,EAF4B,KAW5C,OAPAC,qBAAU,WACRC,IAAIC,OAAOC,oBAAmB,SAACC,GAC7BP,EAAeO,GACfL,GAAW,QAEZ,IAECD,EACK,kBAAC,IAAD,CAAiBO,KAAK,OAI7B,kBAACf,EAAYgB,SAAb,CACEC,MAAO,CACLX,gBAGDF,K,gCC3BP,YAGMO,GAHN,MAGYO,gBAAuB,CACjCC,OAAQC,0CACRC,WAAYD,gCACZE,YAAaF,uCACbG,UAAWH,gBACXI,cAAeJ,4BACfK,kBAAmBL,cACnBM,MAAON,2CACPO,cAAeP,kBAGGT,EAAIC,OACTD,O,gCCff,YAEeiB,mB,kMCkBAC,EAhBM,SAAC,GAA4C,IAA/BC,EAA8B,EAAzCC,UAA8BC,EAAW,6BACvD1B,EAAgB2B,qBAAWjC,KAA3BM,YACR,OACE,kBAAC,IAAD,iBACM0B,EADN,CAEEE,OAAQ,SAACC,GAAD,OACJ7B,EACA,kBAACwB,EAAmBK,GAEpB,kBAAC,IAAD,CAAUC,GAAI,gB,QCIlBC,G,YAAQC,gBAAK,kBAAM,oCACnBC,EAASD,gBAAK,kBAAM,mCACpBE,EAAWF,gBAAK,kBAAM,kEACtBG,EAAQH,gBAAK,kBAAM,kEAEV,SAASI,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,QAASA,KACf,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,CAAiB7B,KAAK,OACxC,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAc8B,OAAK,EAACC,KAAK,IAAIf,UAAWS,IACxC,kBAAC,EAAD,CAAcK,OAAK,EAACC,KAAK,SAASf,UAAWU,IAC7C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,SAASf,UAAWM,IACtC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,UAAUf,UAAWQ,IACvC,kBAAC,IAAD,CAAOO,KAAK,IAAIf,UAAW,kBAAM,kBAAC,IAAD,CAAUK,GAAG,aCpBtCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OACP,kBAAC,IAAMmB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e9bc5090.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { EuiLoadingChart } from \"@elastic/eui\";\r\nimport app from \"../../firebase\";\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [pending, setPending] = useState(true);\r\n\r\n  useEffect(() => {\r\n    app.auth().onAuthStateChanged((user) => {\r\n      setCurrentUser(user);\r\n      setPending(false);\r\n    });\r\n  }, []);\r\n\r\n  if (pending) {\r\n    return <EuiLoadingChart size=\"xl\" />;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n","import * as firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\n\r\nconst app = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDERS_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\r\n});\r\n\r\nexport const auth = app.auth();\r\nexport default app;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/AuthContext/AuthContext\";\r\n\r\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\r\n  const { currentUser } = useContext(AuthContext);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(routeProps) =>\r\n        !!currentUser ? (\r\n          <RouteComponent {...routeProps} />\r\n        ) : (\r\n          <Redirect to={\"/login\"} />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React, { Suspense, lazy } from \"react\";\nimport { Route, Router, Switch, Redirect } from \"react-router-dom\";\nimport { EuiLoadingChart } from \"@elastic/eui\";\n\n// context\nimport { AuthProvider } from \"./context/AuthContext/AuthContext\";\n\n// components\nimport PrivateRoute from \"./routes/PrivateRoutes\";\n\n// utils\nimport history from \"./utils/history\";\n\n// style\nimport \"./App.css\";\nimport \"@elastic/eui/dist/eui_theme_light.css\";\n\nconst Login = lazy(() => import(\"./views/Login/Login\"));\nconst Signup = lazy(() => import(\"./views/Signup/Signup\"));\nconst Homepage = lazy(() => import(\"./views/Homepage/Homepage\"));\nconst Saved = lazy(() => import(\"./views/Saved/Saved\"));\n\nexport default function App() {\n  return (\n    <AuthProvider>\n      <Router history={history}>\n        <Suspense fallback={<EuiLoadingChart size=\"m\" />}>\n          <Switch>\n            <PrivateRoute exact path=\"/\" component={Homepage} />\n            <PrivateRoute exact path=\"/saved\" component={Saved} />\n            <Route exact path=\"/login\" component={Login} />\n            <Route exact path=\"/signup\" component={Signup} />\n            <Route path=\"/\" component={() => <Redirect to=\"/\" />} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </AuthProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}