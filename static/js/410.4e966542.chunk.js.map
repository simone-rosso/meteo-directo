{"version":3,"sources":["views/Signup/Signup.tsx","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/regenerator-runtime/runtime.js"],"names":["withRouter","history","handleSignUp","useCallback","event","a","preventDefault","target","elements","email","password","app","auth","createUserWithEmailAndPassword","value","push","alert","onSubmit","name","type","placeholder","href","module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","makeInvokeMethod","obj","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"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","file":"static/js/410.4e966542.chunk.js","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport app from \"../../firebase\";\r\n\r\ninterface RegisterProps {\r\n  history: any;\r\n}\r\n\r\nconst Signup = ({ history }: RegisterProps) => {\r\n  const handleSignUp = useCallback(\r\n    async (event) => {\r\n      event.preventDefault();\r\n      const { email, password } = event.target.elements;\r\n      try {\r\n        await app\r\n          .auth()\r\n          .createUserWithEmailAndPassword(email.value, password.value);\r\n        history.push(\"/\");\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    },\r\n    [history]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1>Sign up</h1>\r\n      <form onSubmit={handleSignUp}>\r\n        <label>\r\n          Email\r\n          <input name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n        </label>\r\n        <label>\r\n          Password\r\n          <input name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n        </label>\r\n        <button type=\"submit\">Sign Up</button>\r\n      </form>\r\n      <p>\r\n        Ya tienes una cuenta? <a href=\"/login\">Logueate</a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Signup);\r\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}