{"version":3,"sources":["components/Footer/Footer.tsx","components/Header/Header.tsx","components/Layout/Layout.tsx","utils/history.ts","routes/routes.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Footer","className","Header","Layout","children","createBrowserHistory","Homepage","lazy","City","Province","ProvinceList","PageNotFound","RoutesProvider","history","fallback","size","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAOeA,G,kBAJA,WACb,OAAO,yBAAKC,UAAU,oBAAf,YCGMC,G,MAJA,WACb,OAAO,yBAAKD,UAAU,oBAAf,YCgBME,G,MAVA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAChB,OACE,yBAAKH,UAAU,UACb,kBAAC,EAAD,MACA,0BAAMA,UAAU,kBAAkBG,GAClC,kBAAC,EAAD,S,QCbSC,gB,gBCITC,EAAWC,gBAAK,kBAAM,2DACtBC,EAAOD,gBAAK,kBAAM,mCAClBE,EAAWF,gBAAK,kBAAM,mCACtBG,EAAeH,gBAAK,kBAAM,mCAC1BI,EAAeJ,gBAAK,kBAAM,mCAgBjBK,EAdQ,kBACrB,kBAAC,IAAD,CAAQC,QAASA,GACf,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,CAAiBC,KAAK,OACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,QAAQC,UAAWV,IACrC,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,YAAYC,UAAWT,IACzC,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,iBAAiBC,UAAWR,IAC9C,kBAAC,IAAD,CAAOO,KAAK,IAAIC,UAAWP,QCdpB,SAASQ,IACtB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,OCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d50a9679.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n  return <div className=\"footer-container\">Footer</div>;\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => {\r\n  return <div className=\"header-container\">Header</div>;\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport Header from \"../Header/Header\";\r\n\r\nimport \"./Layout.css\";\r\n\r\ninterface LayoutProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Layout = ({ children }: LayoutProps) => {\r\n  return (\r\n    <div className=\"layout\">\r\n      <Header />\r\n      <main className=\"main-container\">{children}</main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","import React, { Suspense, lazy } from \"react\";\r\nimport history from \"../utils/history\";\r\nimport { Route, Switch, Router } from \"react-router-dom\";\r\nimport { EuiLoadingChart } from \"@elastic/eui\";\r\n\r\n//lazy dynamic import of components\r\nconst Homepage = lazy(() => import(\"../views/Homepage/Homepage\"));\r\nconst City = lazy(() => import(\"../views/City/City\"));\r\nconst Province = lazy(() => import(\"../views/Province/Province\"));\r\nconst ProvinceList = lazy(() => import(\"../views/ProvinceList/ProvinceList\"));\r\nconst PageNotFound = lazy(() => import(\"../views/PageNotFound/PageNotFound\"));\r\n\r\nconst RoutesProvider = () => (\r\n  <Router history={history}>\r\n    <Suspense fallback={<EuiLoadingChart size=\"m\" />}>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Homepage} />\r\n        <Route exact path=\"/city\" component={City} />\r\n        <Route exact path=\"/province\" component={Province} />\r\n        <Route exact path=\"/province-list\" component={ProvinceList} />\r\n        <Route path=\"*\" component={PageNotFound} />\r\n      </Switch>\r\n    </Suspense>\r\n  </Router>\r\n);\r\n\r\nexport default RoutesProvider;\r\n","import React from \"react\";\n/* import AppContext from \"./store/AppContext\"; */\nimport \"./App.css\";\nimport Layout from \"./components/Layout/Layout\";\nimport RoutesProvider from \"./routes/routes\";\n\nexport default function App() {\n  return (\n    <Layout>\n      <RoutesProvider />\n    </Layout>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}